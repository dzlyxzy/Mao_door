;********************************************************************
; Copyright (c)  山东大学智能建筑与节能技术研究所 All right reserved 
; 文件名：menory.s
; 作者：Amayer
; 日期：2008年6月3日
; 版本号：v2.0
; 描述：PIC24FJ32GA002内部FLASH读写函数
; 移植的时候 只要修改 头文件包含就行了，别的千万别乱动
;*******************************************************************
;有关寄存器使用的注意事项：(见文件51284f_cn.pdf)
;前八个工作寄存器（W0-W7）用于存储函数参数。参数以自左向右的顺序分配到寄存
;器中，且参数被分配到对齐适当的第一个可用寄存器中。

;如果整个结构都可以存放在可用的寄存器中，那么通过寄存器来传递结构；否则结构参数将存放在堆栈中

;由于结构参数太大而不能存放到寄存器中,对应的参数不分配到寄存器中。
;任何不分配到寄存器的参数都以自右向左的顺序压入堆栈,但是，这并不会禁止使用寄存器来存放下一个参数。

;8 位或16 位标量的函数返回值返回到W0 中， 32 位标量的函数返回值返回到W1:W0中，
;而64 位标量的函数返回值返回到W3:W2:W1:W0 中
.include "p24FJ64GA002.inc"

;声明全局变量，供c文件调用，函数也是一种变量
.global _WriteMem,_WriteLatch,_ReadLatch,_ResetDevice,_Erase 


;***************************************************************		
_WriteMem:			;写指令，对应着c文件中的WriteMem(WORD cmd))，其中dmd代表
	mov	W0,NVMCON	;执行行写操作
	mov	#0x55,W0	;解锁序列，最好先把中断关了
	mov	W0,NVMKEY
	mov	#0xAA,W0
	mov	W0,NVMKEY
	bset NVMCON,#WR
	nop				;这两个空跳是必须的
	nop
pm_wait:
	btsc NVMCON,#WR	        ;检查是否擦除完毕，等待擦除操作完成
	bra pm_wait			;转移到erase_wait位置
	
	return	
;***************************************************************	
;将数据写入锁存器中，然后写入程序存储器中
;W0存储的是函数传递的第一个参数，即地址的高字部分
;W1存储的是函数传递的第二个参数，即地址的低字部分
;W2存储的是函数传递的第三个参数，即要写入数据的高字部分
;W3存储的是函数传递的第四个参数，即要写入数据的低字部分
_WriteLatch: 
	mov	W0,TBLPAG	 ;将地址的高字装入页指针
	tblwtl W3,[W1]	 ;将数据的低字部分写入指定地址的低字部分
	tblwth W2,[W1]	 ;将数据的高16位写入指定地址的高16位
	
	return
	
;***************************************************************	
;从锁存器中读取数据
;W0存储的是函数传递的第一个参数，即地址的高字部分
;W1存储的是函数传递的第二个参数，即地址的低字部分

_ReadLatch: 
	mov	W0,TBLPAG	;将地址的高16位装入页指针
	tblrdl [W1],W0  ;将指定地址的低16位读入W0寄存器
	tblrdh [W1],W1  ;将指定地址的高16位读入W1寄存器
	
	return


;***************************************************************
_ResetDevice:
	
  goto 0xc02

	return

;***************************************************************
_Erase:	;页擦除操作，对应着c文件中Erase(WORD hAddr,WORD lAddr,WORD cmd)

	                         
	push TBLPAG			     ;压栈
	mov	W2,NVMCON            ;写命令字，即擦除命令 w2=0x4042
					
	mov w0,TBLPAG        	 ;载入页地址
	tblwtl  w1,[w1]		     ;空跳w1: offset address

	
	mov	#0x55,W0	         ;解锁序列，做好先把中断关了
	mov	W0,NVMKEY
	mov	#0xAA,W0
	mov	W0,NVMKEY
	bset NVMCON,#WR			 ;WR位置1
	nop						 ;延时，擦除需要时间
	nop
erase_wait:
	btsc NVMCON,#WR	        ;检查是否擦除完毕，等待擦除操作完成
	bra erase_wait			;转移到erase_wait位置
	
	pop     TBLPAG  		;出栈
	return

;***************************************************************	
.end
